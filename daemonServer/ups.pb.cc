// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ups.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gpb_ups {

namespace {

const ::google::protobuf::Descriptor* UConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* UConnected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UConnected_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGoPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGoPickup_reflection_ = NULL;
const ::google::protobuf::Descriptor* UFinished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UFinished_reflection_ = NULL;
const ::google::protobuf::Descriptor* UDeliveryMade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UDeliveryMade_reflection_ = NULL;
const ::google::protobuf::Descriptor* UDeliveryLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UDeliveryLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGoDeliver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGoDeliver_reflection_ = NULL;
const ::google::protobuf::Descriptor* UCommands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UCommands_reflection_ = NULL;
const ::google::protobuf::Descriptor* UResponses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UResponses_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ups_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ups_2eproto() {
  protobuf_AddDesc_ups_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ups.proto");
  GOOGLE_CHECK(file != NULL);
  UConnect_descriptor_ = file->message_type(0);
  static const int UConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, reconnectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, numtrucksinit_),
  };
  UConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UConnect_descriptor_,
      UConnect::default_instance_,
      UConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, _has_bits_[0]),
      -1,
      -1,
      sizeof(UConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, _internal_metadata_),
      -1);
  UConnected_descriptor_ = file->message_type(1);
  static const int UConnected_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, error_),
  };
  UConnected_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UConnected_descriptor_,
      UConnected::default_instance_,
      UConnected_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, _has_bits_[0]),
      -1,
      -1,
      sizeof(UConnected),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, _internal_metadata_),
      -1);
  UGoPickup_descriptor_ = file->message_type(2);
  static const int UGoPickup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, whid_),
  };
  UGoPickup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UGoPickup_descriptor_,
      UGoPickup::default_instance_,
      UGoPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, _has_bits_[0]),
      -1,
      -1,
      sizeof(UGoPickup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, _internal_metadata_),
      -1);
  UFinished_descriptor_ = file->message_type(3);
  static const int UFinished_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, y_),
  };
  UFinished_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UFinished_descriptor_,
      UFinished::default_instance_,
      UFinished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, _has_bits_[0]),
      -1,
      -1,
      sizeof(UFinished),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, _internal_metadata_),
      -1);
  UDeliveryMade_descriptor_ = file->message_type(4);
  static const int UDeliveryMade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, packageid_),
  };
  UDeliveryMade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UDeliveryMade_descriptor_,
      UDeliveryMade::default_instance_,
      UDeliveryMade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, _has_bits_[0]),
      -1,
      -1,
      sizeof(UDeliveryMade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, _internal_metadata_),
      -1);
  UDeliveryLocation_descriptor_ = file->message_type(5);
  static const int UDeliveryLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, y_),
  };
  UDeliveryLocation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UDeliveryLocation_descriptor_,
      UDeliveryLocation::default_instance_,
      UDeliveryLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, _has_bits_[0]),
      -1,
      -1,
      sizeof(UDeliveryLocation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, _internal_metadata_),
      -1);
  UGoDeliver_descriptor_ = file->message_type(6);
  static const int UGoDeliver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, packages_),
  };
  UGoDeliver_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UGoDeliver_descriptor_,
      UGoDeliver::default_instance_,
      UGoDeliver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, _has_bits_[0]),
      -1,
      -1,
      sizeof(UGoDeliver),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, _internal_metadata_),
      -1);
  UCommands_descriptor_ = file->message_type(7);
  static const int UCommands_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, deliveries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, pickups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, simspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, disconnect_),
  };
  UCommands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UCommands_descriptor_,
      UCommands::default_instance_,
      UCommands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, _has_bits_[0]),
      -1,
      -1,
      sizeof(UCommands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, _internal_metadata_),
      -1);
  UResponses_descriptor_ = file->message_type(8);
  static const int UResponses_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, completions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, delivered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, finished_),
  };
  UResponses_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UResponses_descriptor_,
      UResponses::default_instance_,
      UResponses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, _has_bits_[0]),
      -1,
      -1,
      sizeof(UResponses),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ups_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UConnect_descriptor_, &UConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UConnected_descriptor_, &UConnected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UGoPickup_descriptor_, &UGoPickup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UFinished_descriptor_, &UFinished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UDeliveryMade_descriptor_, &UDeliveryMade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UDeliveryLocation_descriptor_, &UDeliveryLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UGoDeliver_descriptor_, &UGoDeliver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UCommands_descriptor_, &UCommands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UResponses_descriptor_, &UResponses::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ups_2eproto() {
  delete UConnect::default_instance_;
  delete UConnect_reflection_;
  delete UConnected::default_instance_;
  delete UConnected_reflection_;
  delete UGoPickup::default_instance_;
  delete UGoPickup_reflection_;
  delete UFinished::default_instance_;
  delete UFinished_reflection_;
  delete UDeliveryMade::default_instance_;
  delete UDeliveryMade_reflection_;
  delete UDeliveryLocation::default_instance_;
  delete UDeliveryLocation_reflection_;
  delete UGoDeliver::default_instance_;
  delete UGoDeliver_reflection_;
  delete UCommands::default_instance_;
  delete UCommands_reflection_;
  delete UResponses::default_instance_;
  delete UResponses_reflection_;
}

void protobuf_AddDesc_ups_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ups_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tups.proto\022\007gpb_ups\"6\n\010UConnect\022\023\n\013reco"
    "nnectid\030\001 \001(\003\022\025\n\rnumtrucksinit\030\002 \001(\005\",\n\n"
    "UConnected\022\017\n\007worldid\030\001 \002(\003\022\r\n\005error\030\002 \001"
    "(\t\"*\n\tUGoPickup\022\017\n\007truckid\030\001 \002(\005\022\014\n\004whid"
    "\030\002 \002(\005\"2\n\tUFinished\022\017\n\007truckid\030\001 \002(\005\022\t\n\001"
    "x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\"3\n\rUDeliveryMade\022\017\n\007t"
    "ruckid\030\001 \002(\005\022\021\n\tpackageid\030\002 \002(\003\"<\n\021UDeli"
    "veryLocation\022\021\n\tpackageid\030\001 \002(\003\022\t\n\001x\030\002 \002"
    "(\005\022\t\n\001y\030\003 \002(\005\"K\n\nUGoDeliver\022\017\n\007truckid\030\001"
    " \002(\005\022,\n\010packages\030\002 \003(\0132\032.gpb_ups.UDelive"
    "ryLocation\"\177\n\tUCommands\022\'\n\ndeliveries\030\001 "
    "\003(\0132\023.gpb_ups.UGoDeliver\022#\n\007pickups\030\002 \003("
    "\0132\022.gpb_ups.UGoPickup\022\020\n\010simspeed\030\003 \001(\r\022"
    "\022\n\ndisconnect\030\004 \001(\010\"\201\001\n\nUResponses\022\'\n\013co"
    "mpletions\030\001 \003(\0132\022.gpb_ups.UFinished\022)\n\td"
    "elivered\030\002 \003(\0132\026.gpb_ups.UDeliveryMade\022\r"
    "\n\005error\030\003 \001(\t\022\020\n\010finished\030\004 \001(\010", 671);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ups.proto", &protobuf_RegisterTypes);
  UConnect::default_instance_ = new UConnect();
  UConnected::default_instance_ = new UConnected();
  UGoPickup::default_instance_ = new UGoPickup();
  UFinished::default_instance_ = new UFinished();
  UDeliveryMade::default_instance_ = new UDeliveryMade();
  UDeliveryLocation::default_instance_ = new UDeliveryLocation();
  UGoDeliver::default_instance_ = new UGoDeliver();
  UCommands::default_instance_ = new UCommands();
  UResponses::default_instance_ = new UResponses();
  UConnect::default_instance_->InitAsDefaultInstance();
  UConnected::default_instance_->InitAsDefaultInstance();
  UGoPickup::default_instance_->InitAsDefaultInstance();
  UFinished::default_instance_->InitAsDefaultInstance();
  UDeliveryMade::default_instance_->InitAsDefaultInstance();
  UDeliveryLocation::default_instance_->InitAsDefaultInstance();
  UGoDeliver::default_instance_->InitAsDefaultInstance();
  UCommands::default_instance_->InitAsDefaultInstance();
  UResponses::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ups_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ups_2eproto {
  StaticDescriptorInitializer_ups_2eproto() {
    protobuf_AddDesc_ups_2eproto();
  }
} static_descriptor_initializer_ups_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UConnect::kReconnectidFieldNumber;
const int UConnect::kNumtrucksinitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UConnect::UConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UConnect)
}

void UConnect::InitAsDefaultInstance() {
}

UConnect::UConnect(const UConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UConnect)
}

void UConnect::SharedCtor() {
  _cached_size_ = 0;
  reconnectid_ = GOOGLE_LONGLONG(0);
  numtrucksinit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UConnect::~UConnect() {
  // @@protoc_insertion_point(destructor:gpb_ups.UConnect)
  SharedDtor();
}

void UConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UConnect_descriptor_;
}

const UConnect& UConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UConnect* UConnect::default_instance_ = NULL;

UConnect* UConnect::New(::google::protobuf::Arena* arena) const {
  UConnect* n = new UConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reconnectid_, numtrucksinit_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 reconnectid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reconnectid_)));
          set_has_reconnectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numtrucksinit;
        break;
      }

      // optional int32 numtrucksinit = 2;
      case 2: {
        if (tag == 16) {
         parse_numtrucksinit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtrucksinit_)));
          set_has_numtrucksinit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UConnect)
  return false;
#undef DO_
}

void UConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UConnect)
  // optional int64 reconnectid = 1;
  if (has_reconnectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reconnectid(), output);
  }

  // optional int32 numtrucksinit = 2;
  if (has_numtrucksinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtrucksinit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UConnect)
}

::google::protobuf::uint8* UConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UConnect)
  // optional int64 reconnectid = 1;
  if (has_reconnectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reconnectid(), target);
  }

  // optional int32 numtrucksinit = 2;
  if (has_numtrucksinit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtrucksinit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UConnect)
  return target;
}

int UConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UConnect)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 reconnectid = 1;
    if (has_reconnectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reconnectid());
    }

    // optional int32 numtrucksinit = 2;
    if (has_numtrucksinit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtrucksinit());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UConnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UConnect)
    MergeFrom(*source);
  }
}

void UConnect::MergeFrom(const UConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reconnectid()) {
      set_reconnectid(from.reconnectid());
    }
    if (from.has_numtrucksinit()) {
      set_numtrucksinit(from.numtrucksinit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UConnect::CopyFrom(const UConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnect::IsInitialized() const {

  return true;
}

void UConnect::Swap(UConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UConnect::InternalSwap(UConnect* other) {
  std::swap(reconnectid_, other->reconnectid_);
  std::swap(numtrucksinit_, other->numtrucksinit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UConnect_descriptor_;
  metadata.reflection = UConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UConnect

// optional int64 reconnectid = 1;
bool UConnect::has_reconnectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UConnect::set_has_reconnectid() {
  _has_bits_[0] |= 0x00000001u;
}
void UConnect::clear_has_reconnectid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UConnect::clear_reconnectid() {
  reconnectid_ = GOOGLE_LONGLONG(0);
  clear_has_reconnectid();
}
 ::google::protobuf::int64 UConnect::reconnectid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UConnect.reconnectid)
  return reconnectid_;
}
 void UConnect::set_reconnectid(::google::protobuf::int64 value) {
  set_has_reconnectid();
  reconnectid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UConnect.reconnectid)
}

// optional int32 numtrucksinit = 2;
bool UConnect::has_numtrucksinit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UConnect::set_has_numtrucksinit() {
  _has_bits_[0] |= 0x00000002u;
}
void UConnect::clear_has_numtrucksinit() {
  _has_bits_[0] &= ~0x00000002u;
}
void UConnect::clear_numtrucksinit() {
  numtrucksinit_ = 0;
  clear_has_numtrucksinit();
}
 ::google::protobuf::int32 UConnect::numtrucksinit() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UConnect.numtrucksinit)
  return numtrucksinit_;
}
 void UConnect::set_numtrucksinit(::google::protobuf::int32 value) {
  set_has_numtrucksinit();
  numtrucksinit_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UConnect.numtrucksinit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UConnected::kWorldidFieldNumber;
const int UConnected::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UConnected::UConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UConnected)
}

void UConnected::InitAsDefaultInstance() {
}

UConnected::UConnected(const UConnected& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UConnected)
}

void UConnected::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  worldid_ = GOOGLE_LONGLONG(0);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UConnected::~UConnected() {
  // @@protoc_insertion_point(destructor:gpb_ups.UConnected)
  SharedDtor();
}

void UConnected::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UConnected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UConnected_descriptor_;
}

const UConnected& UConnected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UConnected* UConnected::default_instance_ = NULL;

UConnected* UConnected::New(::google::protobuf::Arena* arena) const {
  UConnected* n = new UConnected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UConnected)
  if (_has_bits_[0 / 32] & 3u) {
    worldid_ = GOOGLE_LONGLONG(0);
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 worldid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gpb_ups.UConnected.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UConnected)
  return false;
#undef DO_
}

void UConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UConnected)
  // required int64 worldid = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->worldid(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gpb_ups.UConnected.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UConnected)
}

::google::protobuf::uint8* UConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UConnected)
  // required int64 worldid = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->worldid(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gpb_ups.UConnected.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UConnected)
  return target;
}

int UConnected::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UConnected)
  int total_size = 0;

  // required int64 worldid = 1;
  if (has_worldid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worldid());
  }
  // optional string error = 2;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UConnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UConnected* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UConnected)
    MergeFrom(*source);
  }
}

void UConnected::MergeFrom(const UConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UConnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UConnected::CopyFrom(const UConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnected::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UConnected::Swap(UConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UConnected::InternalSwap(UConnected* other) {
  std::swap(worldid_, other->worldid_);
  error_.Swap(&other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UConnected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UConnected_descriptor_;
  metadata.reflection = UConnected_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UConnected

// required int64 worldid = 1;
bool UConnected::has_worldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UConnected::set_has_worldid() {
  _has_bits_[0] |= 0x00000001u;
}
void UConnected::clear_has_worldid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UConnected::clear_worldid() {
  worldid_ = GOOGLE_LONGLONG(0);
  clear_has_worldid();
}
 ::google::protobuf::int64 UConnected::worldid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UConnected.worldid)
  return worldid_;
}
 void UConnected::set_worldid(::google::protobuf::int64 value) {
  set_has_worldid();
  worldid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UConnected.worldid)
}

// optional string error = 2;
bool UConnected::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UConnected::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void UConnected::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void UConnected::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
 const ::std::string& UConnected::error() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UConnected.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UConnected::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpb_ups.UConnected.error)
}
 void UConnected::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpb_ups.UConnected.error)
}
 void UConnected::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpb_ups.UConnected.error)
}
 ::std::string* UConnected::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:gpb_ups.UConnected.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UConnected::release_error() {
  // @@protoc_insertion_point(field_release:gpb_ups.UConnected.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UConnected::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:gpb_ups.UConnected.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UGoPickup::kTruckidFieldNumber;
const int UGoPickup::kWhidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UGoPickup::UGoPickup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UGoPickup)
}

void UGoPickup::InitAsDefaultInstance() {
}

UGoPickup::UGoPickup(const UGoPickup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UGoPickup)
}

void UGoPickup::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  whid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UGoPickup::~UGoPickup() {
  // @@protoc_insertion_point(destructor:gpb_ups.UGoPickup)
  SharedDtor();
}

void UGoPickup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UGoPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGoPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGoPickup_descriptor_;
}

const UGoPickup& UGoPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UGoPickup* UGoPickup::default_instance_ = NULL;

UGoPickup* UGoPickup::New(::google::protobuf::Arena* arena) const {
  UGoPickup* n = new UGoPickup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UGoPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UGoPickup)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UGoPickup, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UGoPickup*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(truckid_, whid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UGoPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UGoPickup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_whid;
        break;
      }

      // required int32 whid = 2;
      case 2: {
        if (tag == 16) {
         parse_whid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whid_)));
          set_has_whid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UGoPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UGoPickup)
  return false;
#undef DO_
}

void UGoPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UGoPickup)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int32 whid = 2;
  if (has_whid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->whid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UGoPickup)
}

::google::protobuf::uint8* UGoPickup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UGoPickup)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int32 whid = 2;
  if (has_whid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->whid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UGoPickup)
  return target;
}

int UGoPickup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gpb_ups.UGoPickup)
  int total_size = 0;

  if (has_truckid()) {
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  if (has_whid()) {
    // required int32 whid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->whid());
  }

  return total_size;
}
int UGoPickup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UGoPickup)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());

    // required int32 whid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->whid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGoPickup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UGoPickup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UGoPickup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UGoPickup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UGoPickup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UGoPickup)
    MergeFrom(*source);
  }
}

void UGoPickup::MergeFrom(const UGoPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UGoPickup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
    if (from.has_whid()) {
      set_whid(from.whid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UGoPickup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UGoPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGoPickup::CopyFrom(const UGoPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UGoPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGoPickup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UGoPickup::Swap(UGoPickup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UGoPickup::InternalSwap(UGoPickup* other) {
  std::swap(truckid_, other->truckid_);
  std::swap(whid_, other->whid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UGoPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGoPickup_descriptor_;
  metadata.reflection = UGoPickup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UGoPickup

// required int32 truckid = 1;
bool UGoPickup::has_truckid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UGoPickup::set_has_truckid() {
  _has_bits_[0] |= 0x00000001u;
}
void UGoPickup::clear_has_truckid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UGoPickup::clear_truckid() {
  truckid_ = 0;
  clear_has_truckid();
}
 ::google::protobuf::int32 UGoPickup::truckid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UGoPickup.truckid)
  return truckid_;
}
 void UGoPickup::set_truckid(::google::protobuf::int32 value) {
  set_has_truckid();
  truckid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UGoPickup.truckid)
}

// required int32 whid = 2;
bool UGoPickup::has_whid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UGoPickup::set_has_whid() {
  _has_bits_[0] |= 0x00000002u;
}
void UGoPickup::clear_has_whid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UGoPickup::clear_whid() {
  whid_ = 0;
  clear_has_whid();
}
 ::google::protobuf::int32 UGoPickup::whid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UGoPickup.whid)
  return whid_;
}
 void UGoPickup::set_whid(::google::protobuf::int32 value) {
  set_has_whid();
  whid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UGoPickup.whid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UFinished::kTruckidFieldNumber;
const int UFinished::kXFieldNumber;
const int UFinished::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UFinished::UFinished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UFinished)
}

void UFinished::InitAsDefaultInstance() {
}

UFinished::UFinished(const UFinished& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UFinished)
}

void UFinished::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UFinished::~UFinished() {
  // @@protoc_insertion_point(destructor:gpb_ups.UFinished)
  SharedDtor();
}

void UFinished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UFinished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UFinished_descriptor_;
}

const UFinished& UFinished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UFinished* UFinished::default_instance_ = NULL;

UFinished* UFinished::New(::google::protobuf::Arena* arena) const {
  UFinished* n = new UFinished;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UFinished)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UFinished, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UFinished*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(truckid_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UFinished)
  return false;
#undef DO_
}

void UFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UFinished)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UFinished)
}

::google::protobuf::uint8* UFinished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UFinished)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UFinished)
  return target;
}

int UFinished::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gpb_ups.UFinished)
  int total_size = 0;

  if (has_truckid()) {
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
int UFinished::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UFinished)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UFinished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UFinished)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UFinished* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UFinished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UFinished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UFinished)
    MergeFrom(*source);
  }
}

void UFinished::MergeFrom(const UFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UFinished)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UFinished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UFinished::CopyFrom(const UFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UFinished::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UFinished::Swap(UFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UFinished::InternalSwap(UFinished* other) {
  std::swap(truckid_, other->truckid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UFinished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UFinished_descriptor_;
  metadata.reflection = UFinished_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UFinished

// required int32 truckid = 1;
bool UFinished::has_truckid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UFinished::set_has_truckid() {
  _has_bits_[0] |= 0x00000001u;
}
void UFinished::clear_has_truckid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UFinished::clear_truckid() {
  truckid_ = 0;
  clear_has_truckid();
}
 ::google::protobuf::int32 UFinished::truckid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UFinished.truckid)
  return truckid_;
}
 void UFinished::set_truckid(::google::protobuf::int32 value) {
  set_has_truckid();
  truckid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UFinished.truckid)
}

// required int32 x = 2;
bool UFinished::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UFinished::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void UFinished::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void UFinished::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 UFinished::x() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UFinished.x)
  return x_;
}
 void UFinished::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UFinished.x)
}

// required int32 y = 3;
bool UFinished::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UFinished::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void UFinished::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void UFinished::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 UFinished::y() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UFinished.y)
  return y_;
}
 void UFinished::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UFinished.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UDeliveryMade::kTruckidFieldNumber;
const int UDeliveryMade::kPackageidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UDeliveryMade::UDeliveryMade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UDeliveryMade)
}

void UDeliveryMade::InitAsDefaultInstance() {
}

UDeliveryMade::UDeliveryMade(const UDeliveryMade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UDeliveryMade)
}

void UDeliveryMade::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  packageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UDeliveryMade::~UDeliveryMade() {
  // @@protoc_insertion_point(destructor:gpb_ups.UDeliveryMade)
  SharedDtor();
}

void UDeliveryMade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UDeliveryMade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UDeliveryMade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UDeliveryMade_descriptor_;
}

const UDeliveryMade& UDeliveryMade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UDeliveryMade* UDeliveryMade::default_instance_ = NULL;

UDeliveryMade* UDeliveryMade::New(::google::protobuf::Arena* arena) const {
  UDeliveryMade* n = new UDeliveryMade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UDeliveryMade::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UDeliveryMade)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UDeliveryMade, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UDeliveryMade*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(packageid_, truckid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UDeliveryMade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UDeliveryMade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_packageid;
        break;
      }

      // required int64 packageid = 2;
      case 2: {
        if (tag == 16) {
         parse_packageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UDeliveryMade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UDeliveryMade)
  return false;
#undef DO_
}

void UDeliveryMade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UDeliveryMade)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int64 packageid = 2;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UDeliveryMade)
}

::google::protobuf::uint8* UDeliveryMade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UDeliveryMade)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int64 packageid = 2;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->packageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UDeliveryMade)
  return target;
}

int UDeliveryMade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gpb_ups.UDeliveryMade)
  int total_size = 0;

  if (has_truckid()) {
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  if (has_packageid()) {
    // required int64 packageid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packageid());
  }

  return total_size;
}
int UDeliveryMade::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UDeliveryMade)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());

    // required int64 packageid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packageid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UDeliveryMade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UDeliveryMade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UDeliveryMade* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UDeliveryMade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UDeliveryMade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UDeliveryMade)
    MergeFrom(*source);
  }
}

void UDeliveryMade::MergeFrom(const UDeliveryMade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UDeliveryMade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UDeliveryMade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UDeliveryMade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDeliveryMade::CopyFrom(const UDeliveryMade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UDeliveryMade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDeliveryMade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UDeliveryMade::Swap(UDeliveryMade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UDeliveryMade::InternalSwap(UDeliveryMade* other) {
  std::swap(truckid_, other->truckid_);
  std::swap(packageid_, other->packageid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UDeliveryMade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UDeliveryMade_descriptor_;
  metadata.reflection = UDeliveryMade_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UDeliveryMade

// required int32 truckid = 1;
bool UDeliveryMade::has_truckid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UDeliveryMade::set_has_truckid() {
  _has_bits_[0] |= 0x00000001u;
}
void UDeliveryMade::clear_has_truckid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UDeliveryMade::clear_truckid() {
  truckid_ = 0;
  clear_has_truckid();
}
 ::google::protobuf::int32 UDeliveryMade::truckid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UDeliveryMade.truckid)
  return truckid_;
}
 void UDeliveryMade::set_truckid(::google::protobuf::int32 value) {
  set_has_truckid();
  truckid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UDeliveryMade.truckid)
}

// required int64 packageid = 2;
bool UDeliveryMade::has_packageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UDeliveryMade::set_has_packageid() {
  _has_bits_[0] |= 0x00000002u;
}
void UDeliveryMade::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UDeliveryMade::clear_packageid() {
  packageid_ = GOOGLE_LONGLONG(0);
  clear_has_packageid();
}
 ::google::protobuf::int64 UDeliveryMade::packageid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UDeliveryMade.packageid)
  return packageid_;
}
 void UDeliveryMade::set_packageid(::google::protobuf::int64 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UDeliveryMade.packageid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UDeliveryLocation::kPackageidFieldNumber;
const int UDeliveryLocation::kXFieldNumber;
const int UDeliveryLocation::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UDeliveryLocation::UDeliveryLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UDeliveryLocation)
}

void UDeliveryLocation::InitAsDefaultInstance() {
}

UDeliveryLocation::UDeliveryLocation(const UDeliveryLocation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UDeliveryLocation)
}

void UDeliveryLocation::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = GOOGLE_LONGLONG(0);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UDeliveryLocation::~UDeliveryLocation() {
  // @@protoc_insertion_point(destructor:gpb_ups.UDeliveryLocation)
  SharedDtor();
}

void UDeliveryLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UDeliveryLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UDeliveryLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UDeliveryLocation_descriptor_;
}

const UDeliveryLocation& UDeliveryLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UDeliveryLocation* UDeliveryLocation::default_instance_ = NULL;

UDeliveryLocation* UDeliveryLocation::New(::google::protobuf::Arena* arena) const {
  UDeliveryLocation* n = new UDeliveryLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UDeliveryLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UDeliveryLocation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UDeliveryLocation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UDeliveryLocation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(packageid_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UDeliveryLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UDeliveryLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 packageid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UDeliveryLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UDeliveryLocation)
  return false;
#undef DO_
}

void UDeliveryLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UDeliveryLocation)
  // required int64 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->packageid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UDeliveryLocation)
}

::google::protobuf::uint8* UDeliveryLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UDeliveryLocation)
  // required int64 packageid = 1;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->packageid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UDeliveryLocation)
  return target;
}

int UDeliveryLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gpb_ups.UDeliveryLocation)
  int total_size = 0;

  if (has_packageid()) {
    // required int64 packageid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packageid());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
int UDeliveryLocation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UDeliveryLocation)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packageid());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UDeliveryLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UDeliveryLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UDeliveryLocation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UDeliveryLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UDeliveryLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UDeliveryLocation)
    MergeFrom(*source);
  }
}

void UDeliveryLocation::MergeFrom(const UDeliveryLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UDeliveryLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UDeliveryLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UDeliveryLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDeliveryLocation::CopyFrom(const UDeliveryLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UDeliveryLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDeliveryLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UDeliveryLocation::Swap(UDeliveryLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UDeliveryLocation::InternalSwap(UDeliveryLocation* other) {
  std::swap(packageid_, other->packageid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UDeliveryLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UDeliveryLocation_descriptor_;
  metadata.reflection = UDeliveryLocation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UDeliveryLocation

// required int64 packageid = 1;
bool UDeliveryLocation::has_packageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UDeliveryLocation::set_has_packageid() {
  _has_bits_[0] |= 0x00000001u;
}
void UDeliveryLocation::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UDeliveryLocation::clear_packageid() {
  packageid_ = GOOGLE_LONGLONG(0);
  clear_has_packageid();
}
 ::google::protobuf::int64 UDeliveryLocation::packageid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UDeliveryLocation.packageid)
  return packageid_;
}
 void UDeliveryLocation::set_packageid(::google::protobuf::int64 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UDeliveryLocation.packageid)
}

// required int32 x = 2;
bool UDeliveryLocation::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UDeliveryLocation::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void UDeliveryLocation::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void UDeliveryLocation::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 UDeliveryLocation::x() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UDeliveryLocation.x)
  return x_;
}
 void UDeliveryLocation::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UDeliveryLocation.x)
}

// required int32 y = 3;
bool UDeliveryLocation::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UDeliveryLocation::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void UDeliveryLocation::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void UDeliveryLocation::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 UDeliveryLocation::y() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UDeliveryLocation.y)
  return y_;
}
 void UDeliveryLocation::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UDeliveryLocation.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UGoDeliver::kTruckidFieldNumber;
const int UGoDeliver::kPackagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UGoDeliver::UGoDeliver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UGoDeliver)
}

void UGoDeliver::InitAsDefaultInstance() {
}

UGoDeliver::UGoDeliver(const UGoDeliver& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UGoDeliver)
}

void UGoDeliver::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UGoDeliver::~UGoDeliver() {
  // @@protoc_insertion_point(destructor:gpb_ups.UGoDeliver)
  SharedDtor();
}

void UGoDeliver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UGoDeliver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGoDeliver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGoDeliver_descriptor_;
}

const UGoDeliver& UGoDeliver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UGoDeliver* UGoDeliver::default_instance_ = NULL;

UGoDeliver* UGoDeliver::New(::google::protobuf::Arena* arena) const {
  UGoDeliver* n = new UGoDeliver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UGoDeliver::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UGoDeliver)
  truckid_ = 0;
  packages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UGoDeliver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UGoDeliver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packages;
        break;
      }

      // repeated .gpb_ups.UDeliveryLocation packages = 2;
      case 2: {
        if (tag == 18) {
         parse_packages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_packages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UGoDeliver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UGoDeliver)
  return false;
#undef DO_
}

void UGoDeliver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UGoDeliver)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // repeated .gpb_ups.UDeliveryLocation packages = 2;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UGoDeliver)
}

::google::protobuf::uint8* UGoDeliver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UGoDeliver)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // repeated .gpb_ups.UDeliveryLocation packages = 2;
  for (unsigned int i = 0, n = this->packages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->packages(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UGoDeliver)
  return target;
}

int UGoDeliver::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UGoDeliver)
  int total_size = 0;

  // required int32 truckid = 1;
  if (has_truckid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }
  // repeated .gpb_ups.UDeliveryLocation packages = 2;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGoDeliver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UGoDeliver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UGoDeliver* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UGoDeliver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UGoDeliver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UGoDeliver)
    MergeFrom(*source);
  }
}

void UGoDeliver::MergeFrom(const UGoDeliver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UGoDeliver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  packages_.MergeFrom(from.packages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UGoDeliver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UGoDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGoDeliver::CopyFrom(const UGoDeliver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UGoDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGoDeliver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->packages())) return false;
  return true;
}

void UGoDeliver::Swap(UGoDeliver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UGoDeliver::InternalSwap(UGoDeliver* other) {
  std::swap(truckid_, other->truckid_);
  packages_.UnsafeArenaSwap(&other->packages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UGoDeliver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGoDeliver_descriptor_;
  metadata.reflection = UGoDeliver_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UGoDeliver

// required int32 truckid = 1;
bool UGoDeliver::has_truckid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UGoDeliver::set_has_truckid() {
  _has_bits_[0] |= 0x00000001u;
}
void UGoDeliver::clear_has_truckid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UGoDeliver::clear_truckid() {
  truckid_ = 0;
  clear_has_truckid();
}
 ::google::protobuf::int32 UGoDeliver::truckid() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UGoDeliver.truckid)
  return truckid_;
}
 void UGoDeliver::set_truckid(::google::protobuf::int32 value) {
  set_has_truckid();
  truckid_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UGoDeliver.truckid)
}

// repeated .gpb_ups.UDeliveryLocation packages = 2;
int UGoDeliver::packages_size() const {
  return packages_.size();
}
void UGoDeliver::clear_packages() {
  packages_.Clear();
}
const ::gpb_ups::UDeliveryLocation& UGoDeliver::packages(int index) const {
  // @@protoc_insertion_point(field_get:gpb_ups.UGoDeliver.packages)
  return packages_.Get(index);
}
::gpb_ups::UDeliveryLocation* UGoDeliver::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:gpb_ups.UGoDeliver.packages)
  return packages_.Mutable(index);
}
::gpb_ups::UDeliveryLocation* UGoDeliver::add_packages() {
  // @@protoc_insertion_point(field_add:gpb_ups.UGoDeliver.packages)
  return packages_.Add();
}
::google::protobuf::RepeatedPtrField< ::gpb_ups::UDeliveryLocation >*
UGoDeliver::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:gpb_ups.UGoDeliver.packages)
  return &packages_;
}
const ::google::protobuf::RepeatedPtrField< ::gpb_ups::UDeliveryLocation >&
UGoDeliver::packages() const {
  // @@protoc_insertion_point(field_list:gpb_ups.UGoDeliver.packages)
  return packages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UCommands::kDeliveriesFieldNumber;
const int UCommands::kPickupsFieldNumber;
const int UCommands::kSimspeedFieldNumber;
const int UCommands::kDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UCommands::UCommands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UCommands)
}

void UCommands::InitAsDefaultInstance() {
}

UCommands::UCommands(const UCommands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UCommands)
}

void UCommands::SharedCtor() {
  _cached_size_ = 0;
  simspeed_ = 0u;
  disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UCommands::~UCommands() {
  // @@protoc_insertion_point(destructor:gpb_ups.UCommands)
  SharedDtor();
}

void UCommands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UCommands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UCommands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UCommands_descriptor_;
}

const UCommands& UCommands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UCommands* UCommands::default_instance_ = NULL;

UCommands* UCommands::New(::google::protobuf::Arena* arena) const {
  UCommands* n = new UCommands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UCommands)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UCommands, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UCommands*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(simspeed_, disconnect_);

#undef ZR_HELPER_
#undef ZR_

  deliveries_.Clear();
  pickups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UCommands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UCommands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gpb_ups.UGoDeliver deliveries = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_deliveries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deliveries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_deliveries;
        if (input->ExpectTag(18)) goto parse_loop_pickups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gpb_ups.UGoPickup pickups = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pickups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pickups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pickups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_simspeed;
        break;
      }

      // optional uint32 simspeed = 3;
      case 3: {
        if (tag == 24) {
         parse_simspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &simspeed_)));
          set_has_simspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disconnect;
        break;
      }

      // optional bool disconnect = 4;
      case 4: {
        if (tag == 32) {
         parse_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disconnect_)));
          set_has_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UCommands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UCommands)
  return false;
#undef DO_
}

void UCommands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UCommands)
  // repeated .gpb_ups.UGoDeliver deliveries = 1;
  for (unsigned int i = 0, n = this->deliveries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deliveries(i), output);
  }

  // repeated .gpb_ups.UGoPickup pickups = 2;
  for (unsigned int i = 0, n = this->pickups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pickups(i), output);
  }

  // optional uint32 simspeed = 3;
  if (has_simspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->simspeed(), output);
  }

  // optional bool disconnect = 4;
  if (has_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UCommands)
}

::google::protobuf::uint8* UCommands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UCommands)
  // repeated .gpb_ups.UGoDeliver deliveries = 1;
  for (unsigned int i = 0, n = this->deliveries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->deliveries(i), false, target);
  }

  // repeated .gpb_ups.UGoPickup pickups = 2;
  for (unsigned int i = 0, n = this->pickups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pickups(i), false, target);
  }

  // optional uint32 simspeed = 3;
  if (has_simspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->simspeed(), target);
  }

  // optional bool disconnect = 4;
  if (has_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UCommands)
  return target;
}

int UCommands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UCommands)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional uint32 simspeed = 3;
    if (has_simspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->simspeed());
    }

    // optional bool disconnect = 4;
    if (has_disconnect()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gpb_ups.UGoDeliver deliveries = 1;
  total_size += 1 * this->deliveries_size();
  for (int i = 0; i < this->deliveries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deliveries(i));
  }

  // repeated .gpb_ups.UGoPickup pickups = 2;
  total_size += 1 * this->pickups_size();
  for (int i = 0; i < this->pickups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pickups(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UCommands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UCommands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UCommands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UCommands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UCommands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UCommands)
    MergeFrom(*source);
  }
}

void UCommands::MergeFrom(const UCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UCommands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  deliveries_.MergeFrom(from.deliveries_);
  pickups_.MergeFrom(from.pickups_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_simspeed()) {
      set_simspeed(from.simspeed());
    }
    if (from.has_disconnect()) {
      set_disconnect(from.disconnect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UCommands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UCommands::CopyFrom(const UCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UCommands::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->deliveries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pickups())) return false;
  return true;
}

void UCommands::Swap(UCommands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UCommands::InternalSwap(UCommands* other) {
  deliveries_.UnsafeArenaSwap(&other->deliveries_);
  pickups_.UnsafeArenaSwap(&other->pickups_);
  std::swap(simspeed_, other->simspeed_);
  std::swap(disconnect_, other->disconnect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UCommands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UCommands_descriptor_;
  metadata.reflection = UCommands_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UCommands

// repeated .gpb_ups.UGoDeliver deliveries = 1;
int UCommands::deliveries_size() const {
  return deliveries_.size();
}
void UCommands::clear_deliveries() {
  deliveries_.Clear();
}
const ::gpb_ups::UGoDeliver& UCommands::deliveries(int index) const {
  // @@protoc_insertion_point(field_get:gpb_ups.UCommands.deliveries)
  return deliveries_.Get(index);
}
::gpb_ups::UGoDeliver* UCommands::mutable_deliveries(int index) {
  // @@protoc_insertion_point(field_mutable:gpb_ups.UCommands.deliveries)
  return deliveries_.Mutable(index);
}
::gpb_ups::UGoDeliver* UCommands::add_deliveries() {
  // @@protoc_insertion_point(field_add:gpb_ups.UCommands.deliveries)
  return deliveries_.Add();
}
::google::protobuf::RepeatedPtrField< ::gpb_ups::UGoDeliver >*
UCommands::mutable_deliveries() {
  // @@protoc_insertion_point(field_mutable_list:gpb_ups.UCommands.deliveries)
  return &deliveries_;
}
const ::google::protobuf::RepeatedPtrField< ::gpb_ups::UGoDeliver >&
UCommands::deliveries() const {
  // @@protoc_insertion_point(field_list:gpb_ups.UCommands.deliveries)
  return deliveries_;
}

// repeated .gpb_ups.UGoPickup pickups = 2;
int UCommands::pickups_size() const {
  return pickups_.size();
}
void UCommands::clear_pickups() {
  pickups_.Clear();
}
const ::gpb_ups::UGoPickup& UCommands::pickups(int index) const {
  // @@protoc_insertion_point(field_get:gpb_ups.UCommands.pickups)
  return pickups_.Get(index);
}
::gpb_ups::UGoPickup* UCommands::mutable_pickups(int index) {
  // @@protoc_insertion_point(field_mutable:gpb_ups.UCommands.pickups)
  return pickups_.Mutable(index);
}
::gpb_ups::UGoPickup* UCommands::add_pickups() {
  // @@protoc_insertion_point(field_add:gpb_ups.UCommands.pickups)
  return pickups_.Add();
}
::google::protobuf::RepeatedPtrField< ::gpb_ups::UGoPickup >*
UCommands::mutable_pickups() {
  // @@protoc_insertion_point(field_mutable_list:gpb_ups.UCommands.pickups)
  return &pickups_;
}
const ::google::protobuf::RepeatedPtrField< ::gpb_ups::UGoPickup >&
UCommands::pickups() const {
  // @@protoc_insertion_point(field_list:gpb_ups.UCommands.pickups)
  return pickups_;
}

// optional uint32 simspeed = 3;
bool UCommands::has_simspeed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UCommands::set_has_simspeed() {
  _has_bits_[0] |= 0x00000004u;
}
void UCommands::clear_has_simspeed() {
  _has_bits_[0] &= ~0x00000004u;
}
void UCommands::clear_simspeed() {
  simspeed_ = 0u;
  clear_has_simspeed();
}
 ::google::protobuf::uint32 UCommands::simspeed() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UCommands.simspeed)
  return simspeed_;
}
 void UCommands::set_simspeed(::google::protobuf::uint32 value) {
  set_has_simspeed();
  simspeed_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UCommands.simspeed)
}

// optional bool disconnect = 4;
bool UCommands::has_disconnect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UCommands::set_has_disconnect() {
  _has_bits_[0] |= 0x00000008u;
}
void UCommands::clear_has_disconnect() {
  _has_bits_[0] &= ~0x00000008u;
}
void UCommands::clear_disconnect() {
  disconnect_ = false;
  clear_has_disconnect();
}
 bool UCommands::disconnect() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UCommands.disconnect)
  return disconnect_;
}
 void UCommands::set_disconnect(bool value) {
  set_has_disconnect();
  disconnect_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UCommands.disconnect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UResponses::kCompletionsFieldNumber;
const int UResponses::kDeliveredFieldNumber;
const int UResponses::kErrorFieldNumber;
const int UResponses::kFinishedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UResponses::UResponses()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpb_ups.UResponses)
}

void UResponses::InitAsDefaultInstance() {
}

UResponses::UResponses(const UResponses& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpb_ups.UResponses)
}

void UResponses::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UResponses::~UResponses() {
  // @@protoc_insertion_point(destructor:gpb_ups.UResponses)
  SharedDtor();
}

void UResponses::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UResponses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UResponses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UResponses_descriptor_;
}

const UResponses& UResponses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UResponses* UResponses::default_instance_ = NULL;

UResponses* UResponses::New(::google::protobuf::Arena* arena) const {
  UResponses* n = new UResponses;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:gpb_ups.UResponses)
  if (_has_bits_[0 / 32] & 12u) {
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    finished_ = false;
  }
  completions_.Clear();
  delivered_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UResponses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpb_ups.UResponses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gpb_ups.UFinished completions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_completions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_completions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_completions;
        if (input->ExpectTag(18)) goto parse_loop_delivered;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .gpb_ups.UDeliveryMade delivered = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_delivered:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_delivered()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_delivered;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gpb_ups.UResponses.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_finished;
        break;
      }

      // optional bool finished = 4;
      case 4: {
        if (tag == 32) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpb_ups.UResponses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpb_ups.UResponses)
  return false;
#undef DO_
}

void UResponses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpb_ups.UResponses)
  // repeated .gpb_ups.UFinished completions = 1;
  for (unsigned int i = 0, n = this->completions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->completions(i), output);
  }

  // repeated .gpb_ups.UDeliveryMade delivered = 2;
  for (unsigned int i = 0, n = this->delivered_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->delivered(i), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gpb_ups.UResponses.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // optional bool finished = 4;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finished(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpb_ups.UResponses)
}

::google::protobuf::uint8* UResponses::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpb_ups.UResponses)
  // repeated .gpb_ups.UFinished completions = 1;
  for (unsigned int i = 0, n = this->completions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->completions(i), false, target);
  }

  // repeated .gpb_ups.UDeliveryMade delivered = 2;
  for (unsigned int i = 0, n = this->delivered_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->delivered(i), false, target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gpb_ups.UResponses.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // optional bool finished = 4;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finished(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpb_ups.UResponses)
  return target;
}

int UResponses::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gpb_ups.UResponses)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bool finished = 4;
    if (has_finished()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gpb_ups.UFinished completions = 1;
  total_size += 1 * this->completions_size();
  for (int i = 0; i < this->completions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completions(i));
  }

  // repeated .gpb_ups.UDeliveryMade delivered = 2;
  total_size += 1 * this->delivered_size();
  for (int i = 0; i < this->delivered_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delivered(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UResponses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gpb_ups.UResponses)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UResponses* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UResponses>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gpb_ups.UResponses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gpb_ups.UResponses)
    MergeFrom(*source);
  }
}

void UResponses::MergeFrom(const UResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpb_ups.UResponses)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  completions_.MergeFrom(from.completions_);
  delivered_.MergeFrom(from.delivered_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UResponses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gpb_ups.UResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UResponses::CopyFrom(const UResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpb_ups.UResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UResponses::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->completions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->delivered())) return false;
  return true;
}

void UResponses::Swap(UResponses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UResponses::InternalSwap(UResponses* other) {
  completions_.UnsafeArenaSwap(&other->completions_);
  delivered_.UnsafeArenaSwap(&other->delivered_);
  error_.Swap(&other->error_);
  std::swap(finished_, other->finished_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UResponses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UResponses_descriptor_;
  metadata.reflection = UResponses_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UResponses

// repeated .gpb_ups.UFinished completions = 1;
int UResponses::completions_size() const {
  return completions_.size();
}
void UResponses::clear_completions() {
  completions_.Clear();
}
const ::gpb_ups::UFinished& UResponses::completions(int index) const {
  // @@protoc_insertion_point(field_get:gpb_ups.UResponses.completions)
  return completions_.Get(index);
}
::gpb_ups::UFinished* UResponses::mutable_completions(int index) {
  // @@protoc_insertion_point(field_mutable:gpb_ups.UResponses.completions)
  return completions_.Mutable(index);
}
::gpb_ups::UFinished* UResponses::add_completions() {
  // @@protoc_insertion_point(field_add:gpb_ups.UResponses.completions)
  return completions_.Add();
}
::google::protobuf::RepeatedPtrField< ::gpb_ups::UFinished >*
UResponses::mutable_completions() {
  // @@protoc_insertion_point(field_mutable_list:gpb_ups.UResponses.completions)
  return &completions_;
}
const ::google::protobuf::RepeatedPtrField< ::gpb_ups::UFinished >&
UResponses::completions() const {
  // @@protoc_insertion_point(field_list:gpb_ups.UResponses.completions)
  return completions_;
}

// repeated .gpb_ups.UDeliveryMade delivered = 2;
int UResponses::delivered_size() const {
  return delivered_.size();
}
void UResponses::clear_delivered() {
  delivered_.Clear();
}
const ::gpb_ups::UDeliveryMade& UResponses::delivered(int index) const {
  // @@protoc_insertion_point(field_get:gpb_ups.UResponses.delivered)
  return delivered_.Get(index);
}
::gpb_ups::UDeliveryMade* UResponses::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:gpb_ups.UResponses.delivered)
  return delivered_.Mutable(index);
}
::gpb_ups::UDeliveryMade* UResponses::add_delivered() {
  // @@protoc_insertion_point(field_add:gpb_ups.UResponses.delivered)
  return delivered_.Add();
}
::google::protobuf::RepeatedPtrField< ::gpb_ups::UDeliveryMade >*
UResponses::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:gpb_ups.UResponses.delivered)
  return &delivered_;
}
const ::google::protobuf::RepeatedPtrField< ::gpb_ups::UDeliveryMade >&
UResponses::delivered() const {
  // @@protoc_insertion_point(field_list:gpb_ups.UResponses.delivered)
  return delivered_;
}

// optional string error = 3;
bool UResponses::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UResponses::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void UResponses::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void UResponses::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
 const ::std::string& UResponses::error() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UResponses.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UResponses::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpb_ups.UResponses.error)
}
 void UResponses::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpb_ups.UResponses.error)
}
 void UResponses::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpb_ups.UResponses.error)
}
 ::std::string* UResponses::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:gpb_ups.UResponses.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UResponses::release_error() {
  // @@protoc_insertion_point(field_release:gpb_ups.UResponses.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UResponses::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:gpb_ups.UResponses.error)
}

// optional bool finished = 4;
bool UResponses::has_finished() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UResponses::set_has_finished() {
  _has_bits_[0] |= 0x00000008u;
}
void UResponses::clear_has_finished() {
  _has_bits_[0] &= ~0x00000008u;
}
void UResponses::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
 bool UResponses::finished() const {
  // @@protoc_insertion_point(field_get:gpb_ups.UResponses.finished)
  return finished_;
}
 void UResponses::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
  // @@protoc_insertion_point(field_set:gpb_ups.UResponses.finished)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gpb_ups

// @@protoc_insertion_point(global_scope)
